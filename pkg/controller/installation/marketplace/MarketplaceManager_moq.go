// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package marketplace

import (
	"context"
	"github.com/operator-framework/operator-lifecycle-manager/pkg/api/apis/operators/v1alpha1"
	"github.com/operator-framework/operator-lifecycle-manager/pkg/lib/ownerutil"
	"github.com/operator-framework/operator-marketplace/pkg/apis/operators/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sync"
)

var (
	lockMarketplaceInterfaceMockGetSubscriptionInstallPlan sync.RWMutex
	lockMarketplaceInterfaceMockInstallOperator            sync.RWMutex
)

// Ensure, that MarketplaceInterfaceMock does implement MarketplaceInterface.
// If this is not the case, regenerate this file with moq.
var _ MarketplaceInterface = &MarketplaceInterfaceMock{}

// MarketplaceInterfaceMock is a mock implementation of MarketplaceInterface.
//
//     func TestSomethingThatUsesMarketplaceInterface(t *testing.T) {
//
//         // make and configure a mocked MarketplaceInterface
//         mockedMarketplaceInterface := &MarketplaceInterfaceMock{
//             GetSubscriptionInstallPlanFunc: func(ctx context.Context, serverClient client.Client, subName string, ns string) (*v1alpha1.InstallPlan, *v1alpha1.Subscription, error) {
// 	               panic("mock out the GetSubscriptionInstallPlan method")
//             },
//             InstallOperatorFunc: func(ctx context.Context, serverClient client.Client, owner ownerutil.Owner, os v1.OperatorSource, t Target, operatorGroupNamespaces []string, approvalStrategy v1alpha1.Approval) error {
// 	               panic("mock out the InstallOperator method")
//             },
//         }
//
//         // use mockedMarketplaceInterface in code that requires MarketplaceInterface
//         // and then make assertions.
//
//     }
type MarketplaceInterfaceMock struct {
	// GetSubscriptionInstallPlanFunc mocks the GetSubscriptionInstallPlan method.
	GetSubscriptionInstallPlanFunc func(ctx context.Context, serverClient client.Client, subName string, ns string) (*v1alpha1.InstallPlan, *v1alpha1.Subscription, error)

	// InstallOperatorFunc mocks the InstallOperator method.
	InstallOperatorFunc func(ctx context.Context, serverClient client.Client, owner ownerutil.Owner, os v1.OperatorSource, t Target, operatorGroupNamespaces []string, approvalStrategy v1alpha1.Approval) error

	// calls tracks calls to the methods.
	calls struct {
		// GetSubscriptionInstallPlan holds details about calls to the GetSubscriptionInstallPlan method.
		GetSubscriptionInstallPlan []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServerClient is the serverClient argument value.
			ServerClient client.Client
			// SubName is the subName argument value.
			SubName string
			// Ns is the ns argument value.
			Ns string
		}
		// InstallOperator holds details about calls to the InstallOperator method.
		InstallOperator []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ServerClient is the serverClient argument value.
			ServerClient client.Client
			// Owner is the owner argument value.
			Owner ownerutil.Owner
			// Os is the os argument value.
			Os v1.OperatorSource
			// T is the t argument value.
			T Target
			// OperatorGroupNamespaces is the operatorGroupNamespaces argument value.
			OperatorGroupNamespaces []string
			// ApprovalStrategy is the approvalStrategy argument value.
			ApprovalStrategy v1alpha1.Approval
		}
	}
}

// GetSubscriptionInstallPlan calls GetSubscriptionInstallPlanFunc.
func (mock *MarketplaceInterfaceMock) GetSubscriptionInstallPlan(ctx context.Context, serverClient client.Client, subName string, ns string) (*v1alpha1.InstallPlan, *v1alpha1.Subscription, error) {
	if mock.GetSubscriptionInstallPlanFunc == nil {
		panic("MarketplaceInterfaceMock.GetSubscriptionInstallPlanFunc: method is nil but MarketplaceInterface.GetSubscriptionInstallPlan was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ServerClient client.Client
		SubName      string
		Ns           string
	}{
		Ctx:          ctx,
		ServerClient: serverClient,
		SubName:      subName,
		Ns:           ns,
	}
	lockMarketplaceInterfaceMockGetSubscriptionInstallPlan.Lock()
	mock.calls.GetSubscriptionInstallPlan = append(mock.calls.GetSubscriptionInstallPlan, callInfo)
	lockMarketplaceInterfaceMockGetSubscriptionInstallPlan.Unlock()
	return mock.GetSubscriptionInstallPlanFunc(ctx, serverClient, subName, ns)
}

// GetSubscriptionInstallPlanCalls gets all the calls that were made to GetSubscriptionInstallPlan.
// Check the length with:
//     len(mockedMarketplaceInterface.GetSubscriptionInstallPlanCalls())
func (mock *MarketplaceInterfaceMock) GetSubscriptionInstallPlanCalls() []struct {
	Ctx          context.Context
	ServerClient client.Client
	SubName      string
	Ns           string
} {
	var calls []struct {
		Ctx          context.Context
		ServerClient client.Client
		SubName      string
		Ns           string
	}
	lockMarketplaceInterfaceMockGetSubscriptionInstallPlan.RLock()
	calls = mock.calls.GetSubscriptionInstallPlan
	lockMarketplaceInterfaceMockGetSubscriptionInstallPlan.RUnlock()
	return calls
}

// InstallOperator calls InstallOperatorFunc.
func (mock *MarketplaceInterfaceMock) InstallOperator(ctx context.Context, serverClient client.Client, owner ownerutil.Owner, os v1.OperatorSource, t Target, operatorGroupNamespaces []string, approvalStrategy v1alpha1.Approval) error {
	if mock.InstallOperatorFunc == nil {
		panic("MarketplaceInterfaceMock.InstallOperatorFunc: method is nil but MarketplaceInterface.InstallOperator was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		ServerClient            client.Client
		Owner                   ownerutil.Owner
		Os                      v1.OperatorSource
		T                       Target
		OperatorGroupNamespaces []string
		ApprovalStrategy        v1alpha1.Approval
	}{
		Ctx:                     ctx,
		ServerClient:            serverClient,
		Owner:                   owner,
		Os:                      os,
		T:                       t,
		OperatorGroupNamespaces: operatorGroupNamespaces,
		ApprovalStrategy:        approvalStrategy,
	}
	lockMarketplaceInterfaceMockInstallOperator.Lock()
	mock.calls.InstallOperator = append(mock.calls.InstallOperator, callInfo)
	lockMarketplaceInterfaceMockInstallOperator.Unlock()
	return mock.InstallOperatorFunc(ctx, serverClient, owner, os, t, operatorGroupNamespaces, approvalStrategy)
}

// InstallOperatorCalls gets all the calls that were made to InstallOperator.
// Check the length with:
//     len(mockedMarketplaceInterface.InstallOperatorCalls())
func (mock *MarketplaceInterfaceMock) InstallOperatorCalls() []struct {
	Ctx                     context.Context
	ServerClient            client.Client
	Owner                   ownerutil.Owner
	Os                      v1.OperatorSource
	T                       Target
	OperatorGroupNamespaces []string
	ApprovalStrategy        v1alpha1.Approval
} {
	var calls []struct {
		Ctx                     context.Context
		ServerClient            client.Client
		Owner                   ownerutil.Owner
		Os                      v1.OperatorSource
		T                       Target
		OperatorGroupNamespaces []string
		ApprovalStrategy        v1alpha1.Approval
	}
	lockMarketplaceInterfaceMockInstallOperator.RLock()
	calls = mock.calls.InstallOperator
	lockMarketplaceInterfaceMockInstallOperator.RUnlock()
	return calls
}
