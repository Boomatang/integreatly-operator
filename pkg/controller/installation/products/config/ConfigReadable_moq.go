// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package config

import (
	"github.com/integr8ly/integreatly-operator/pkg/apis/integreatly/v1alpha1"
	"sync"
)

var (
	lockConfigReadableMockGetProductName sync.RWMutex
	lockConfigReadableMockRead           sync.RWMutex
)

// Ensure, that ConfigReadableMock does implement ConfigReadable.
// If this is not the case, regenerate this file with moq.
var _ ConfigReadable = &ConfigReadableMock{}

// ConfigReadableMock is a mock implementation of ConfigReadable.
//
//     func TestSomethingThatUsesConfigReadable(t *testing.T) {
//
//         // make and configure a mocked ConfigReadable
//         mockedConfigReadable := &ConfigReadableMock{
//             GetProductNameFunc: func() v1alpha1.ProductName {
// 	               panic("mock out the GetProductName method")
//             },
//             ReadFunc: func() ProductConfig {
// 	               panic("mock out the Read method")
//             },
//         }
//
//         // use mockedConfigReadable in code that requires ConfigReadable
//         // and then make assertions.
//
//     }
type ConfigReadableMock struct {
	// GetProductNameFunc mocks the GetProductName method.
	GetProductNameFunc func() v1alpha1.ProductName

	// ReadFunc mocks the Read method.
	ReadFunc func() ProductConfig

	// calls tracks calls to the methods.
	calls struct {
		// GetProductName holds details about calls to the GetProductName method.
		GetProductName []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
		}
	}
}

// GetProductName calls GetProductNameFunc.
func (mock *ConfigReadableMock) GetProductName() v1alpha1.ProductName {
	if mock.GetProductNameFunc == nil {
		panic("ConfigReadableMock.GetProductNameFunc: method is nil but ConfigReadable.GetProductName was just called")
	}
	callInfo := struct {
	}{}
	lockConfigReadableMockGetProductName.Lock()
	mock.calls.GetProductName = append(mock.calls.GetProductName, callInfo)
	lockConfigReadableMockGetProductName.Unlock()
	return mock.GetProductNameFunc()
}

// GetProductNameCalls gets all the calls that were made to GetProductName.
// Check the length with:
//     len(mockedConfigReadable.GetProductNameCalls())
func (mock *ConfigReadableMock) GetProductNameCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigReadableMockGetProductName.RLock()
	calls = mock.calls.GetProductName
	lockConfigReadableMockGetProductName.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *ConfigReadableMock) Read() ProductConfig {
	if mock.ReadFunc == nil {
		panic("ConfigReadableMock.ReadFunc: method is nil but ConfigReadable.Read was just called")
	}
	callInfo := struct {
	}{}
	lockConfigReadableMockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	lockConfigReadableMockRead.Unlock()
	return mock.ReadFunc()
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedConfigReadable.ReadCalls())
func (mock *ConfigReadableMock) ReadCalls() []struct {
} {
	var calls []struct {
	}
	lockConfigReadableMockRead.RLock()
	calls = mock.calls.Read
	lockConfigReadableMockRead.RUnlock()
	return calls
}
